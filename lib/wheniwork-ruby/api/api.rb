=begin
Wheniwork

OpenAPI spec version: v2

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module WhenIWork
  class Api
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    #
    # This method allows you to get a list of all positions in your account.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :show_deleted Whether to show positions that have been deleted.
    # @return [InlineResponse200]
    def get_positions(opts = {})
      data, _status_code, _headers = get_positions_with_http_info(opts)
      return data
    end

    #
    # This method allows you to get a list of all positions in your account.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :show_deleted Whether to show positions that have been deleted.
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def get_positions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: Api.get_positions ..."
      end
      # resource path
      local_var_path = "/positions".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'show_deleted'] = opts[:'show_deleted'] if opts[:'show_deleted']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Api#get_positions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    #
    # Gets the details of an existing shift.
    # @param shift_id max records to return
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def get_shift(shift_id, opts = {})
      data, _status_code, _headers = get_shift_with_http_info(shift_id, opts)
      return data
    end

    #
    # Gets the details of an existing shift.
    # @param shift_id max records to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def get_shift_with_http_info(shift_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: Api.get_shift ..."
      end
      # verify the required parameter 'shift_id' is set
      fail ArgumentError, "Missing the required parameter 'shift_id' when calling Api.get_shift" if shift_id.nil?
      # resource path
      local_var_path = "/shifts/{shift-id}".sub('{format}','json').sub('{' + 'shift-id' + '}', shift_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Api#get_shift\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    #
    # Get a list of shifts.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_id The ID of the user to get shifts for. For multiple users, enter a list of user IDs separated by commas (e.g. 1,5,3).
    # @option opts [DateTime] :start Start time for the search window. The default is the current date and time
    # @option opts [DateTime] :_end End time for the search window. The default is exactly three days from the start time.
    # @option opts [String] :location_id The ID of the location to get shifts for. For multiple locations, enter a list of location IDs separated by commas.
    # @option opts [String] :position_id The ID of the position to get shifts for. For multiple position, enter a list of position IDs separated by commas.
    # @option opts [BOOLEAN] :include_open Whether to include OpenShifts in the results.
    # @option opts [BOOLEAN] :include_onlyopen Whether to include OpenShifts in the results.
    # @option opts [BOOLEAN] :unpublished Whether unpublished shifts should be included in the results.
    # @return [InlineResponse2001]
    def get_shifts(opts = {})
      data, _status_code, _headers = get_shifts_with_http_info(opts)
      return data
    end

    #
    # Get a list of shifts.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_id The ID of the user to get shifts for. For multiple users, enter a list of user IDs separated by commas (e.g. 1,5,3).
    # @option opts [DateTime] :start Start time for the search window. The default is the current date and time
    # @option opts [DateTime] :_end End time for the search window. The default is exactly three days from the start time.
    # @option opts [String] :location_id The ID of the location to get shifts for. For multiple locations, enter a list of location IDs separated by commas.
    # @option opts [String] :position_id The ID of the position to get shifts for. For multiple position, enter a list of position IDs separated by commas.
    # @option opts [BOOLEAN] :include_open Whether to include OpenShifts in the results.
    # @option opts [BOOLEAN] :include_onlyopen Whether to include OpenShifts in the results.
    # @option opts [BOOLEAN] :unpublished Whether unpublished shifts should be included in the results.
    # @return [Array<(InlineResponse2001, Fixnum, Hash)>] InlineResponse2001 data, response status code and response headers
    def get_shifts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: Api.get_shifts ..."
      end
      # resource path
      local_var_path = "/shifts".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'user_id'] = opts[:'user_id'] if opts[:'user_id']
      query_params[:'start'] = opts[:'start'] if opts[:'start']
      query_params[:'end'] = opts[:'_end'] if opts[:'_end']
      query_params[:'location_id'] = opts[:'location_id'] if opts[:'location_id']
      query_params[:'position_id'] = opts[:'position_id'] if opts[:'position_id']
      query_params[:'include_open'] = opts[:'include_open'] if opts[:'include_open']
      query_params[:'include_onlyopen'] = opts[:'include_onlyopen'] if opts[:'include_onlyopen']
      query_params[:'unpublished'] = opts[:'unpublished'] if opts[:'unpublished']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2001')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Api#get_shifts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    #
    # Get a specific user by their ID.
    # @param user_id The user identifier number
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def get_user(user_id, opts = {})
      data, _status_code, _headers = get_user_with_http_info(user_id, opts)
      return data
    end

    #
    # Get a specific user by their ID.
    # @param user_id The user identifier number
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Fixnum, Hash)>] InlineResponse2003 data, response status code and response headers
    def get_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: Api.get_user ..."
      end
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling Api.get_user" if user_id.nil?
      # resource path
      local_var_path = "/users/{user-id}".sub('{format}','json').sub('{' + 'user-id' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2003')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Api#get_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
