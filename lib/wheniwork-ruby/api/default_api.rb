=begin
#WhenIWork

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'uri'

module WhenIWork
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # This method allows you to list payroll periods or find ones within a specified date range.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start 
    # @option opts [DateTime] :_end 
    # @return [PayrollsResponse]
    def payrolls_get(opts = {})
      data, _status_code, _headers = payrolls_get_with_http_info(opts)
      data
    end

    # This method allows you to list payroll periods or find ones within a specified date range.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start 
    # @option opts [DateTime] :_end 
    # @return [Array<(PayrollsResponse, Fixnum, Hash)>] PayrollsResponse data, response status code and response headers
    def payrolls_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.payrolls_get ...'
      end
      # resource path
      local_var_path = '/payrolls'

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'end'] = opts[:'_end'] if !opts[:'_end'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PayrollsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#payrolls_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This method allows you to get a list of all positions in your account.
    # @param [Hash] opts the optional parameters
    # @return [PositionResponse]
    def positions_get(opts = {})
      data, _status_code, _headers = positions_get_with_http_info(opts)
      data
    end

    # This method allows you to get a list of all positions in your account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PositionResponse, Fixnum, Hash)>] PositionResponse data, response status code and response headers
    def positions_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.positions_get ...'
      end
      # resource path
      local_var_path = '/positions'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PositionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#positions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # all shifts
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id The ID of the user to get shifts for. For multiple users, enter a list of user IDs separated by commas (e.g. 1,5,3)
    # @option opts [String] :start 
    # @option opts [DateTime] :_end 
    # @return [ShiftsResponse]
    def shifts_get(opts = {})
      data, _status_code, _headers = shifts_get_with_http_info(opts)
      data
    end

    # all shifts
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id The ID of the user to get shifts for. For multiple users, enter a list of user IDs separated by commas (e.g. 1,5,3)
    # @option opts [String] :start 
    # @option opts [DateTime] :_end 
    # @return [Array<(ShiftsResponse, Fixnum, Hash)>] ShiftsResponse data, response status code and response headers
    def shifts_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.shifts_get ...'
      end
      # resource path
      local_var_path = '/shifts'

      # query parameters
      query_params = {}
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'end'] = opts[:'_end'] if !opts[:'_end'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShiftsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#shifts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find a shift by id
    # @param shift_id ID of shift to return
    # @param [Hash] opts the optional parameters
    # @return [Shift]
    def shifts_shift_id_get(shift_id, opts = {})
      data, _status_code, _headers = shifts_shift_id_get_with_http_info(shift_id, opts)
      data
    end

    # Find a shift by id
    # @param shift_id ID of shift to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Shift, Fixnum, Hash)>] Shift data, response status code and response headers
    def shifts_shift_id_get_with_http_info(shift_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.shifts_shift_id_get ...'
      end
      # verify the required parameter 'shift_id' is set
      if @api_client.config.client_side_validation && shift_id.nil?
        fail ArgumentError, "Missing the required parameter 'shift_id' when calling DefaultApi.shifts_shift_id_get"
      end
      # resource path
      local_var_path = '/shifts/{shiftId}'.sub('{' + 'shiftId' + '}', shift_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Shift')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#shifts_shift_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # get times
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id The ID of the user to get times for. For multiple users, enter a list of user IDs separated by commas (e.g. 1,5,3)
    # @option opts [String] :start 
    # @option opts [DateTime] :_end 
    # @return [TimesResponse]
    def times_get(opts = {})
      data, _status_code, _headers = times_get_with_http_info(opts)
      data
    end

    # get times
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id The ID of the user to get times for. For multiple users, enter a list of user IDs separated by commas (e.g. 1,5,3)
    # @option opts [String] :start 
    # @option opts [DateTime] :_end 
    # @return [Array<(TimesResponse, Fixnum, Hash)>] TimesResponse data, response status code and response headers
    def times_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.times_get ...'
      end
      # resource path
      local_var_path = '/times'

      # query parameters
      query_params = {}
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'end'] = opts[:'_end'] if !opts[:'_end'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TimesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#times_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # get users
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :ids The ID of the user to get times for. For multiple users, enter a list of user IDs separated by commas (e.g. 1,5,3)
    # @return [UsersResponse]
    def users_get(opts = {})
      data, _status_code, _headers = users_get_with_http_info(opts)
      data
    end

    # get users
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :ids The ID of the user to get times for. For multiple users, enter a list of user IDs separated by commas (e.g. 1,5,3)
    # @return [Array<(UsersResponse, Fixnum, Hash)>] UsersResponse data, response status code and response headers
    def users_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.users_get ...'
      end
      # resource path
      local_var_path = '/users'

      # query parameters
      query_params = {}
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UsersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
